// To regenerate deviceplugin.pb.go run make generate-protocols

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: cdiresolver.proto

package cdiresolver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CDIResolver_AllocatePodDevices_FullMethodName       = "/cdiresolver.CDIResolver/AllocatePodDevices"
	CDIResolver_AllocateContainerDevices_FullMethodName = "/cdiresolver.CDIResolver/AllocateContainerDevices"
	CDIResolver_FreeContainerDevices_FullMethodName     = "/cdiresolver.CDIResolver/FreeContainerDevices"
	CDIResolver_FreePodDevices_FullMethodName           = "/cdiresolver.CDIResolver/FreePodDevices"
)

// CDIResolverClient is the client API for CDIResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CDIResolverClient interface {
	AllocatePodDevices(ctx context.Context, in *PodRequest, opts ...grpc.CallOption) (*PhysicalDeviceResponse, error)
	AllocateContainerDevices(ctx context.Context, in *ContainerRequest, opts ...grpc.CallOption) (*PhysicalDeviceResponse, error)
	FreeContainerDevices(ctx context.Context, in *ContainerRequest, opts ...grpc.CallOption) (*PhysicalDeviceResponse, error)
	FreePodDevices(ctx context.Context, in *PodRequest, opts ...grpc.CallOption) (*PhysicalDeviceResponse, error)
}

type cDIResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewCDIResolverClient(cc grpc.ClientConnInterface) CDIResolverClient {
	return &cDIResolverClient{cc}
}

func (c *cDIResolverClient) AllocatePodDevices(ctx context.Context, in *PodRequest, opts ...grpc.CallOption) (*PhysicalDeviceResponse, error) {
	out := new(PhysicalDeviceResponse)
	err := c.cc.Invoke(ctx, CDIResolver_AllocatePodDevices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDIResolverClient) AllocateContainerDevices(ctx context.Context, in *ContainerRequest, opts ...grpc.CallOption) (*PhysicalDeviceResponse, error) {
	out := new(PhysicalDeviceResponse)
	err := c.cc.Invoke(ctx, CDIResolver_AllocateContainerDevices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDIResolverClient) FreeContainerDevices(ctx context.Context, in *ContainerRequest, opts ...grpc.CallOption) (*PhysicalDeviceResponse, error) {
	out := new(PhysicalDeviceResponse)
	err := c.cc.Invoke(ctx, CDIResolver_FreeContainerDevices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDIResolverClient) FreePodDevices(ctx context.Context, in *PodRequest, opts ...grpc.CallOption) (*PhysicalDeviceResponse, error) {
	out := new(PhysicalDeviceResponse)
	err := c.cc.Invoke(ctx, CDIResolver_FreePodDevices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CDIResolverServer is the server API for CDIResolver service.
// All implementations must embed UnimplementedCDIResolverServer
// for forward compatibility
type CDIResolverServer interface {
	AllocatePodDevices(context.Context, *PodRequest) (*PhysicalDeviceResponse, error)
	AllocateContainerDevices(context.Context, *ContainerRequest) (*PhysicalDeviceResponse, error)
	FreeContainerDevices(context.Context, *ContainerRequest) (*PhysicalDeviceResponse, error)
	FreePodDevices(context.Context, *PodRequest) (*PhysicalDeviceResponse, error)
	mustEmbedUnimplementedCDIResolverServer()
}

// UnimplementedCDIResolverServer must be embedded to have forward compatible implementations.
type UnimplementedCDIResolverServer struct {
}

func (UnimplementedCDIResolverServer) AllocatePodDevices(context.Context, *PodRequest) (*PhysicalDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocatePodDevices not implemented")
}
func (UnimplementedCDIResolverServer) AllocateContainerDevices(context.Context, *ContainerRequest) (*PhysicalDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateContainerDevices not implemented")
}
func (UnimplementedCDIResolverServer) FreeContainerDevices(context.Context, *ContainerRequest) (*PhysicalDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreeContainerDevices not implemented")
}
func (UnimplementedCDIResolverServer) FreePodDevices(context.Context, *PodRequest) (*PhysicalDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreePodDevices not implemented")
}
func (UnimplementedCDIResolverServer) mustEmbedUnimplementedCDIResolverServer() {}

// UnsafeCDIResolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CDIResolverServer will
// result in compilation errors.
type UnsafeCDIResolverServer interface {
	mustEmbedUnimplementedCDIResolverServer()
}

func RegisterCDIResolverServer(s grpc.ServiceRegistrar, srv CDIResolverServer) {
	s.RegisterService(&CDIResolver_ServiceDesc, srv)
}

func _CDIResolver_AllocatePodDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDIResolverServer).AllocatePodDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CDIResolver_AllocatePodDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDIResolverServer).AllocatePodDevices(ctx, req.(*PodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDIResolver_AllocateContainerDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDIResolverServer).AllocateContainerDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CDIResolver_AllocateContainerDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDIResolverServer).AllocateContainerDevices(ctx, req.(*ContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDIResolver_FreeContainerDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDIResolverServer).FreeContainerDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CDIResolver_FreeContainerDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDIResolverServer).FreeContainerDevices(ctx, req.(*ContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDIResolver_FreePodDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDIResolverServer).FreePodDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CDIResolver_FreePodDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDIResolverServer).FreePodDevices(ctx, req.(*PodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CDIResolver_ServiceDesc is the grpc.ServiceDesc for CDIResolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CDIResolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cdiresolver.CDIResolver",
	HandlerType: (*CDIResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocatePodDevices",
			Handler:    _CDIResolver_AllocatePodDevices_Handler,
		},
		{
			MethodName: "AllocateContainerDevices",
			Handler:    _CDIResolver_AllocateContainerDevices_Handler,
		},
		{
			MethodName: "FreeContainerDevices",
			Handler:    _CDIResolver_FreeContainerDevices_Handler,
		},
		{
			MethodName: "FreePodDevices",
			Handler:    _CDIResolver_FreePodDevices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cdiresolver.proto",
}
