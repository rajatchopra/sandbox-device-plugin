// To regenerate deviceplugin.pb.go run make generate-protocols

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: cdiresolver.proto

package cdiresolver

import (
	_ "github.com/gogo/protobuf/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PodID is the UUID of the pod for which devices are being sought
	PodID string `protobuf:"bytes,1,opt,name=PodID,proto3" json:"PodID,omitempty"`
	// Count is the number of devices needed
	Count int32 `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
	// DeviceType is the type of device
	DeviceType string `protobuf:"bytes,3,opt,name=DeviceType,proto3" json:"DeviceType,omitempty"`
}

func (x *PodRequest) Reset() {
	*x = PodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdiresolver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodRequest) ProtoMessage() {}

func (x *PodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cdiresolver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodRequest.ProtoReflect.Descriptor instead.
func (*PodRequest) Descriptor() ([]byte, []int) {
	return file_cdiresolver_proto_rawDescGZIP(), []int{0}
}

func (x *PodRequest) GetPodID() string {
	if x != nil {
		return x.PodID
	}
	return ""
}

func (x *PodRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PodRequest) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

type PhysicalDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PhysicalDeviceID is the list of physical ids of the devices requested
	PhysicalDeviceID []string `protobuf:"bytes,1,rep,name=PhysicalDeviceID,proto3" json:"PhysicalDeviceID,omitempty"`
}

func (x *PhysicalDeviceResponse) Reset() {
	*x = PhysicalDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdiresolver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhysicalDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhysicalDeviceResponse) ProtoMessage() {}

func (x *PhysicalDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cdiresolver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhysicalDeviceResponse.ProtoReflect.Descriptor instead.
func (*PhysicalDeviceResponse) Descriptor() ([]byte, []int) {
	return file_cdiresolver_proto_rawDescGZIP(), []int{1}
}

func (x *PhysicalDeviceResponse) GetPhysicalDeviceID() []string {
	if x != nil {
		return x.PhysicalDeviceID
	}
	return nil
}

type ContainerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PodID is the uuid string of the pod
	PodID string `protobuf:"bytes,1,opt,name=PodID,proto3" json:"PodID,omitempty"`
	// ContainerID is the uuid string of a container within the pod
	ContainerID string `protobuf:"bytes,2,opt,name=ContainerID,proto3" json:"ContainerID,omitempty"`
	// VirtualDeviceID is a list of virtual_ids that should be associated with the pod
	VirtualDeviceID []string `protobuf:"bytes,3,rep,name=VirtualDeviceID,proto3" json:"VirtualDeviceID,omitempty"`
}

func (x *ContainerRequest) Reset() {
	*x = ContainerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdiresolver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerRequest) ProtoMessage() {}

func (x *ContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cdiresolver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerRequest.ProtoReflect.Descriptor instead.
func (*ContainerRequest) Descriptor() ([]byte, []int) {
	return file_cdiresolver_proto_rawDescGZIP(), []int{2}
}

func (x *ContainerRequest) GetPodID() string {
	if x != nil {
		return x.PodID
	}
	return ""
}

func (x *ContainerRequest) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *ContainerRequest) GetVirtualDeviceID() []string {
	if x != nil {
		return x.VirtualDeviceID
	}
	return nil
}

var File_cdiresolver_proto protoreflect.FileDescriptor

var file_cdiresolver_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x64, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x63, 0x64, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x1a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x67,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x58, 0x0a, 0x0a, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x50, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x6f,
	0x64, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x44, 0x0a, 0x16, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x22,
	0x74, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x50, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x32, 0xf5, 0x02, 0x0a, 0x0b, 0x43, 0x44, 0x49, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x12, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x17, 0x2e, 0x63, 0x64,
	0x69, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x64, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x18, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x64, 0x69, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x64, 0x69, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a,
	0x14, 0x46, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x64, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x64, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0e, 0x46,
	0x72, 0x65, 0x65, 0x50, 0x6f, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x17, 0x2e,
	0x63, 0x64, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x64, 0x69, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2c, 0x5a,
	0x0e, 0x2e, 0x2e, 0x2f, 0x63, 0x64, 0x69, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0xd8,
	0xe1, 0x1e, 0x00, 0x80, 0xe2, 0x1e, 0x01, 0xc8, 0xe1, 0x1e, 0x01, 0xc8, 0xe2, 0x1e, 0x01, 0xe0,
	0xe2, 0x1e, 0x01, 0xd0, 0xe2, 0x1e, 0x01, 0x90, 0xe3, 0x1e, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_cdiresolver_proto_rawDescOnce sync.Once
	file_cdiresolver_proto_rawDescData = file_cdiresolver_proto_rawDesc
)

func file_cdiresolver_proto_rawDescGZIP() []byte {
	file_cdiresolver_proto_rawDescOnce.Do(func() {
		file_cdiresolver_proto_rawDescData = protoimpl.X.CompressGZIP(file_cdiresolver_proto_rawDescData)
	})
	return file_cdiresolver_proto_rawDescData
}

var file_cdiresolver_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_cdiresolver_proto_goTypes = []interface{}{
	(*PodRequest)(nil),             // 0: cdiresolver.PodRequest
	(*PhysicalDeviceResponse)(nil), // 1: cdiresolver.PhysicalDeviceResponse
	(*ContainerRequest)(nil),       // 2: cdiresolver.ContainerRequest
}
var file_cdiresolver_proto_depIdxs = []int32{
	0, // 0: cdiresolver.CDIResolver.AllocatePodDevices:input_type -> cdiresolver.PodRequest
	2, // 1: cdiresolver.CDIResolver.AllocateContainerDevices:input_type -> cdiresolver.ContainerRequest
	2, // 2: cdiresolver.CDIResolver.FreeContainerDevices:input_type -> cdiresolver.ContainerRequest
	0, // 3: cdiresolver.CDIResolver.FreePodDevices:input_type -> cdiresolver.PodRequest
	1, // 4: cdiresolver.CDIResolver.AllocatePodDevices:output_type -> cdiresolver.PhysicalDeviceResponse
	1, // 5: cdiresolver.CDIResolver.AllocateContainerDevices:output_type -> cdiresolver.PhysicalDeviceResponse
	1, // 6: cdiresolver.CDIResolver.FreeContainerDevices:output_type -> cdiresolver.PhysicalDeviceResponse
	1, // 7: cdiresolver.CDIResolver.FreePodDevices:output_type -> cdiresolver.PhysicalDeviceResponse
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_cdiresolver_proto_init() }
func file_cdiresolver_proto_init() {
	if File_cdiresolver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cdiresolver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdiresolver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhysicalDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdiresolver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cdiresolver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cdiresolver_proto_goTypes,
		DependencyIndexes: file_cdiresolver_proto_depIdxs,
		MessageInfos:      file_cdiresolver_proto_msgTypes,
	}.Build()
	File_cdiresolver_proto = out.File
	file_cdiresolver_proto_rawDesc = nil
	file_cdiresolver_proto_goTypes = nil
	file_cdiresolver_proto_depIdxs = nil
}
