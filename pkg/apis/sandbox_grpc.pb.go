// To regenerate api.pb.go run `hack/update-codegen.sh protobindings`

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: sandbox.proto

package apis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Sandbox_GetDeviceAllocation_FullMethodName = "/apis.Sandbox/GetDeviceAllocation"
	Sandbox_Allocate_FullMethodName            = "/apis.Sandbox/Allocate"
)

// SandboxClient is the client API for Sandbox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Sandbox is the service advertised by the sandbox-device-plugin
// Likely client will be the sandbox-shim which will need to know
// which physical devices it needs to cold plug
type SandboxClient interface {
	GetDeviceAllocation(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*PhysicalDeviceResponse, error)
	Allocate(ctx context.Context, in *AllocateRequest, opts ...grpc.CallOption) (*PhysicalDeviceResponse, error)
}

type sandboxClient struct {
	cc grpc.ClientConnInterface
}

func NewSandboxClient(cc grpc.ClientConnInterface) SandboxClient {
	return &sandboxClient{cc}
}

func (c *sandboxClient) GetDeviceAllocation(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*PhysicalDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PhysicalDeviceResponse)
	err := c.cc.Invoke(ctx, Sandbox_GetDeviceAllocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxClient) Allocate(ctx context.Context, in *AllocateRequest, opts ...grpc.CallOption) (*PhysicalDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PhysicalDeviceResponse)
	err := c.cc.Invoke(ctx, Sandbox_Allocate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SandboxServer is the server API for Sandbox service.
// All implementations must embed UnimplementedSandboxServer
// for forward compatibility.
//
// Sandbox is the service advertised by the sandbox-device-plugin
// Likely client will be the sandbox-shim which will need to know
// which physical devices it needs to cold plug
type SandboxServer interface {
	GetDeviceAllocation(context.Context, *DeviceRequest) (*PhysicalDeviceResponse, error)
	Allocate(context.Context, *AllocateRequest) (*PhysicalDeviceResponse, error)
	mustEmbedUnimplementedSandboxServer()
}

// UnimplementedSandboxServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSandboxServer struct{}

func (UnimplementedSandboxServer) GetDeviceAllocation(context.Context, *DeviceRequest) (*PhysicalDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceAllocation not implemented")
}
func (UnimplementedSandboxServer) Allocate(context.Context, *AllocateRequest) (*PhysicalDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Allocate not implemented")
}
func (UnimplementedSandboxServer) mustEmbedUnimplementedSandboxServer() {}
func (UnimplementedSandboxServer) testEmbeddedByValue()                 {}

// UnsafeSandboxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SandboxServer will
// result in compilation errors.
type UnsafeSandboxServer interface {
	mustEmbedUnimplementedSandboxServer()
}

func RegisterSandboxServer(s grpc.ServiceRegistrar, srv SandboxServer) {
	// If the following call pancis, it indicates UnimplementedSandboxServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Sandbox_ServiceDesc, srv)
}

func _Sandbox_GetDeviceAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServer).GetDeviceAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandbox_GetDeviceAllocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServer).GetDeviceAllocation(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandbox_Allocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServer).Allocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandbox_Allocate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServer).Allocate(ctx, req.(*AllocateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sandbox_ServiceDesc is the grpc.ServiceDesc for Sandbox service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sandbox_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apis.Sandbox",
	HandlerType: (*SandboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceAllocation",
			Handler:    _Sandbox_GetDeviceAllocation_Handler,
		},
		{
			MethodName: "Allocate",
			Handler:    _Sandbox_Allocate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sandbox.proto",
}
